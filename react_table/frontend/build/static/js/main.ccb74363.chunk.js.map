{"version":3,"sources":["SelectableDataTable.tsx","index.tsx"],"names":["columns","field","headerName","width","editable","type","description","sortable","valueGetter","params","row","firstName","lastName","withStreamlitConnection","props","useEffect","Streamlit","setFrameHeight","useState","selectionModel","setSelectionModel","rows","args","data","style","height","pageSize","rowsPerPageOptions","checkboxSelection","onSelectionModelChange","newSelectionModel","value","setComponentValue","ReactDOM","render","document","getElementById"],"mappings":"+PAMMA,EAAwB,CAC5B,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,IACxC,CACEF,MAAO,YACPC,WAAY,aACZC,MAAO,IACPC,UAAU,GAEZ,CACEH,MAAO,WACPC,WAAY,YACZC,MAAO,IACPC,UAAU,GAEZ,CACEH,MAAO,MACPC,WAAY,MACZG,KAAM,SACNF,MAAO,IACPC,UAAU,GAEZ,CACEH,MAAO,WACPC,WAAY,YACZI,YAAa,sDACbC,UAAU,EACVJ,MAAO,IACPK,YAAa,SAACC,GAAD,gBACRA,EAAOC,IAAIC,WAAa,GADhB,YACsBF,EAAOC,IAAIE,UAAY,OAwC/CC,eAlCuC,SAAAC,GACpDC,qBAAU,WACRC,IAAUC,oBAGX,IAKD,EAA6CC,mBAA6B,IAA1E,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAOP,EAAMQ,KAAKC,KAExB,OACG,uBAAKC,MAAO,CAAEC,OAAQ,IAAKtB,MAAO,SACjC,gBAAC,IAAD,CACEkB,KAAMA,EACNrB,QAASA,EACT0B,SAAU,EACVC,mBAAoB,CAAC,GACrBC,mBAAiB,EAEjBC,uBAAwB,SAACC,GAlBA,IAACC,EAC5BX,EAD4BW,EAmBDD,GAjB3Bd,IAAUgB,kBAAkBD,IAmB1BZ,eAAgBA,QC9DxBc,IAASC,OAAO,kBAAC,EAAD,MAAyBC,SAASC,eAAe,W","file":"static/js/main.ccb74363.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useState, useEffect, ReactText } from \"react\"\nimport { DataGrid, GridColDef, GridValueGetterParams, GridSelectionModel} from '@mui/x-data-grid';\n\nimport {ComponentProps, Streamlit, withStreamlitConnection} from \"streamlit-component-lib\"\n\nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 150,\n    editable: true,\n  },\n  {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 150,\n    editable: true,\n  },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 110,\n    editable: true,\n  },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params: GridValueGetterParams) =>\n      `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n  },\n];\n\n\n\nconst SelectableDataTable: React.FC<ComponentProps> = props => {\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  })\n\n   const handleSelectionChange = (value: ReactText[]): void => {\n      setSelectionModel(value)\n      Streamlit.setComponentValue(value)\n    }\n\n  const [selectionModel, setSelectionModel] =  useState<GridSelectionModel>([]);\n\n  const rows = props.args.data\n  \n  return (\n     <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n        rowsPerPageOptions={[5]}\n        checkboxSelection\n        //disableSelectionOnClick\n        onSelectionModelChange={(newSelectionModel) => {\n           handleSelectionChange(newSelectionModel);\n         }}\n        selectionModel={selectionModel}\n      />\n\n    </div>\n      \n  )\n}\n\nexport default withStreamlitConnection(SelectableDataTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SelectableDataTable from \"./SelectableDataTable\"\n\nReactDOM.render(<SelectableDataTable />, document.getElementById(\"root\"))\n"],"sourceRoot":""}